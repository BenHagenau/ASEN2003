function [x y z th t_end] = track2(g)

ti_helix = 0;
tf_helix = 1;

ti_jump = 2;
tf_jump = 3;

ti_turn = 4;
tf_turn = 5;

ti_paradown = 6;
tf_paradown = 7;

ti_ground = 8;
tf_ground = 9;

t_end = tf_ground;

syms t;

start_height = 125;
helix_bottom = 40;
helix_radius = 100;
turn_radius = 40;
end_parabola_factor = 100;

z_helix = start_height - helix_bottom*t;
z_helixtojump = helix_bottom*(t-tf_helix)^2 + ...
    subs(diff(z_helix), t, tf_helix)*(t-tf_helix) + ...
    subs(z_helix, t, tf_helix);
z_jump = -helix_bottom*(t-ti_jump)^2 + ...
    subs(diff(z_helixtojump), t, ti_jump)*(t-ti_jump) + ...
    subs(z_helixtojump, t, ti_jump);
z_jumptoturn = helix_bottom/2*(t-tf_jump)^2 + ...
    subs(diff(z_jump), t, tf_jump)*(t-tf_jump) + ...
    subs(z_jump, t, tf_jump);
z_turn = subs(z_jumptoturn, t, ti_turn);
z_flat = z_turn;
z_paradown = -z_turn/2*(t-ti_paradown)^2 + z_turn;
z_paraup = z_turn/2*(t-ti_ground)^2;
z_ground = 0;

z = piecewise(...
    ti_helix <= t < tf_helix, z_helix,...
    tf_helix <= t < ti_jump, z_helixtojump,...
    ti_jump <= t < tf_jump, z_jump,...
    tf_jump <= t < ti_turn, z_jumptoturn,...
    ti_turn <= t < tf_turn, z_turn,...
    tf_turn <= t < ti_paradown, z_flat,...
    ti_paradown <= t < tf_paradown, z_paradown,...
    tf_paradown <= t < ti_ground, z_paraup,...
    ti_ground <= t < tf_ground, z_ground);

x_helix = helix_radius*sin((t-ti_helix)*2*pi);

slope_x_helixend = subs(diff(x_helix), t, tf_helix);
v = sqrt(2*g*(subs(z, t, 0)-subs(z, t, ti_jump)));
vz = sqrt(2*g*(subs(z, t, (ti_jump + tf_jump)/2)-subs(z, t, ti_jump)));
vx = sqrt(v^2-vz^2);
slope_x_startjump = vx/vz*subs(diff(z_jump), t, ti_jump);

x_helixtojump = (slope_x_startjump - slope_x_helixend)/2*(t-tf_helix)^2 + ...
    slope_x_helixend*(t-tf_helix) + ...
    subs(x_helix, t, tf_helix);

x_jump = slope_x_startjump*(t-ti_jump) + ...
    subs(x_helixtojump, t, ti_jump);
x_jumptoturn = slope_x_startjump*(t-tf_jump) + ...
    subs(x_jump, t, tf_jump);
x_turn = turn_radius*sin(t*pi) + ...
    subs(x_jumptoturn, t, ti_turn);
x_flat = -turn_radius*(t-tf_turn) + ...
    subs(x_turn, t, tf_turn);
x_paradown = -end_parabola_factor*(t-ti_paradown) + ...
    subs(x_flat, t, ti_paradown);
x_paraup = -end_parabola_factor*(t-tf_paradown) + ...
    subs(x_paradown, t, tf_paradown);
x_ground = (tf_ground-t)*subs(x_paraup, t, ti_ground);

x = piecewise(...
    ti_helix <= t < tf_helix, x_helix,...
    tf_helix <= t < ti_jump, x_helixtojump,...
    ti_jump <= t < tf_jump, x_jump,...
    tf_jump <= t < ti_turn, x_jumptoturn,...
    ti_turn <= t < tf_turn, x_turn,...
    tf_turn <= t < ti_paradown, x_flat,...
    ti_paradown <= t < tf_paradown, x_paradown,...
    tf_paradown <= t < ti_ground, x_paraup,...
    ti_ground <= t < tf_ground, x_ground);

y_helix = helix_radius*(1-cos(t*2*pi));
y_turn = turn_radius*(1-cos(t*pi));

y = piecewise(...
    ti_helix <= t < tf_helix, y_helix,...
    tf_helix <= t < ti_turn, subs(y_helix, t, tf_helix),...
    ti_turn <= t < tf_turn, y_turn,...
    tf_turn <= t < t_end, subs(y_turn, t, tf_turn));

th = piecewise(...
    ti_helix <= t < tf_helix, -pi/2*t,...
    tf_helix <= t < ti_jump, -pi/2*(ti_jump-t),...
    ti_jump <= t < tf_jump, 0,...
    tf_jump <= t < ti_turn, -pi/2*(t-tf_jump),...
    ti_turn <= t < tf_turn, -pi/2,...
    tf_turn <= t < ti_paradown, -pi/2*(ti_paradown-t),...
    ti_paradown <= t < tf_ground, 0);

end